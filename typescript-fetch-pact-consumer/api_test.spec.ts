/**
 * Product API
 * Pactflow Product API demo
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api";
import { Configuration } from "./configuration";
import { PactV3, MatchersV3 } from "@pact-foundation/pact";

const config: Configuration = {};

const {
  eachLike,
  atLeastLike,
  integer,
  datetime,
  boolean,
  string,
  regex,
  like,
  eachKeyLike,
} = MatchersV3;

describe("DefaultApi", () => {
  let instance: api.DefaultApi;

  const provider = new PactV3({
    consumer: "DefaultApi-consumer",
    provider: "DefaultApi",
    logLevel: "debug",
    port: 9953,
  });

  test("createProduct", () => {
    const body: api.Product  = {
        id: "1234",
        type: "food",
        price: 42,
        name: "burger",
    };
    const product = {
      id: "1234",
      type: "food",
      price: 42,
      name: "burger",
    };
    provider
      .given("createProduct is available on DefaultApi service")
      .uponReceiving("A POST request for createProduct")
      .withRequest({
        method: "POST",
        path: "/products",
        contentType: "application/json",
        body: body,
      })
      .willRespondWith({
        status: 200,
        body: product,
        contentType: "application/json",
      });
    return provider.executeTest(async (mockserver) => {
      instance = new api.DefaultApi(config, mockserver.url);
      const result = await instance.createProduct(body, {});
      expect(result).resolves;
      expect(result).toEqual(product);
    });
  });
  test("getAllProducts", () => {
    const products = [
      {
        id: "1234",
        type: "food",
        price: 42,
        name: "burger",
      },
      {
        id: "1235",
        type: "food",
        price: 22,
        name: "pizza",
      },
    ];
    provider
      .given("getAllProducts is available on DefaultApi service")
      .uponReceiving("A GET request for getAllProducts")
      .withRequest({
        method: "GET",
        path: "/products",
      })
      .willRespondWith({
        status: 200,
        body: products,
        contentType: "application/json",
      });
    return provider.executeTest(async (mockserver) => {
      instance = new api.DefaultApi(config, mockserver.url);
      const result = await instance.getAllProducts({});
      expect(result).resolves;
      expect(result).toEqual(products);
    });
  });
  test("getProductByID", () => {
    const id: string = "id_example";
    const product = {
      id: "1234",
      type: "food",
      price: 42,
      name: "burger",
    };
    provider
      .given("getProductByID is available on DefaultApi service")
      .uponReceiving("A GET request for getProductByID")
      .withRequest({
        method: "GET",
        path: `/product/${id}`,
      })
      .willRespondWith({
        status: 200,
        body: product,
        contentType: "application/json",
      });
    return provider.executeTest(async (mockserver) => {
      instance = new api.DefaultApi(config, mockserver.url);
      const result = await instance.getProductByID(id, {});
      expect(result).toEqual(product);
    });
  });
});
